<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">

    <context:component-scan base-package="com.lbwwz"/>

    <!--<bean id="mqConnectionFactory" class="MqConnectionFactory"></bean>-->

    <context:property-placeholder location="classpath:/rabbitmq.properties" ignore-unresolvable="true"/>

    <bean id="connectionFactory" class="org.springframework.amqp.rabbit.connection.CachingConnectionFactory">
        <property name="host" value="${rabbitmq.host}" />
        <property name="port" value="${rabbitmq.port}" />
        <property name="username" value="${rabbitmq.username}" />
        <property name="password" value="${rabbitmq.password}" />
        <property name="virtualHost" value="${rabbitmq.virtualHost}" />
        <!-- 缓存模式   CONNECTION CHANNEL，默认的缓存模式是CHANNEL。
        缓存模式 CHANNEL,connection 是单例的
        当缓存模式是 CONNECTION时(Cache connections and channels within each connection), 队列的自动声明等等 (参考 the section called “Automatic Declaration of Exchanges, Queues and Bindings”) 将不再支持。
        在框架(如． RabbitTemplate) 中使用的通道将会可靠地返回到缓存中.如果在框架外创建了通道 (如.直接访问connection(s)并调用 createChannel() ),
        你必须可靠地返回它们(通过关闭),也许需要在 finally 块中以防止耗尽通道.
         -->
        <!--<property name="cacheMode" value="CONNECTION"/>-->

        <!-- 默认通道缓存25,多线程环境中，较小的缓存意味着通道的创建和关闭将以很高的速率运行.加大默认缓存大小可避免这种开销
         如果达到了限制,调用线程将会阻塞，直到某个通道可用或者超时, 在后者的情况中，将抛出 AmqpTimeoutException异常.-->
        <property name="channelCacheSize" value="${rabbitmq.channel.cache.size}"/>

        <!-- channelCheckoutTimeout属性. 当此属性的值大于０时（毫秒）， channelCacheSize会变成连接上创建通道数目的限制. -->
        <property name="channelCheckoutTimeout" value="200"/>

        <!-- connectionLimit 1.5.5 新增，会限制连接的总数目,当达到限制值时，将 channelCheckoutTimeLimit  来等待空闲连接.如果时间超时了，将抛出 AmqpTimeoutException -->
        <property name="connectionLimit" value="2"/>

        <!-- 默认创建了存活0个线程的线程池，存活时间为60秒. 当需要使用大量连接时，你应该考虑在 CachingConnectionFactory 定制一个 executor .
        然后，同一个executor会用于所有连接，其线程也是共享的． executor的线程池是没有界限的或按预期使用率来设置(通常, 一个连接至少应该有一个线程）.
        如果在每个连接上创建了多个channels，那么池的大小会影响并发性,因此一个可变的线程池executor应该是最合适的. -->
        <!--<property name="executor" value="20"/>-->

    </bean>

    <bean id="rabbitAdmin"  class="org.springframework.amqp.rabbit.core.RabbitAdmin">
        <constructor-arg ref="connectionFactory" />
    </bean>

    <!--消息转换器-->
    <bean id="jsonMessageConverter" class="org.springframework.amqp.support.converter.Jackson2JsonMessageConverter" />

    <!--发送相关-->
    <rabbit:template id="delayMsgTemplate" connection-factory="connectionFactory"
                     message-converter="jsonMessageConverter" exchange="test_delay_exchange"

                     mandatory="true" />
    <!--confirm-callback="confirmCallBackListener"-->
    <!--return-callback="returnCallBackListener"-->

    <!-- 延迟消息start -->
    <!--定义一个topic延时转发器-->
    <rabbit:topic-exchange  name="test_delay_exchange" delayed="true">
        <rabbit:bindings>
            <rabbit:binding queue="test_delay_queue" pattern="order.delay.notify" />
        </rabbit:bindings>
    </rabbit:topic-exchange>



    <!--创建交换器的类型 并持久化-->
    <bean id="topicExchange"  class="org.springframework.amqp.core.TopicExchange">
        <constructor-arg index="0" value="test_delay_exchange"/>
        <constructor-arg index="1" value="true"/>
        <constructor-arg index="2" value="false"/>
        <constructor-arg index="3" >
            <map>
                <entry key="x-delayed-type" value="direct"/>
            </map>
        </constructor-arg>
    </bean>

    <!-- 绑定交换器、队列 -->
    <bean id="binding"  class="org.springframework.amqp.core.Binding">
        <constructor-arg index="0" value="testQueue"/>
        <constructor-arg index="1" value="QUEUE"/>
        <constructor-arg index="2" value="testExchange"/>
        <constructor-arg index="3" value="testQueue"/>
        <constructor-arg index="4" value="#{arguments}"></constructor-arg>
    </bean>

    <!--<rabbit:queue name="test_delay_queue" />-->

    <bean id="queue"  class="org.springframework.amqp.core.Queue">
        <constructor-arg index="0" value="test_delay_queue"/>
        <constructor-arg index="1" value="true"/>
        <constructor-arg index="2" value="false"/>
        <constructor-arg index="3" value="false"/>
    </bean>




    <!--<rabbit:listener-container connection-factory="connectionFactory" channel-transacted="false" acknowledge="manual"-->
                               <!--message-converter="jsonMessageConverter">-->
        <!--<rabbit:listener queues="test_delay_queue" ref="orderConsumer" />-->
    <!--</rabbit:listener-container>-->


    <!--定义监听-->
    <!--<bean id="listenerContainer" class="org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer">-->
        <!--<property name="queues" >-->
            <!--<array>-->
                <!--<ref bean="test_delay_queue"/>-->
            <!--</array>-->
        <!--</property>-->
        <!--<property name="connectionFactory" ref="connectionFactory"/>-->
        <!--<property name="messageListener" ref="orderConsumer"/>-->
        <!--<property name="messageConverter" ref="jsonMessageConverter"/>-->
        <!--<property name="acknowledgeMode" value="MANUAL"/>-->

    <!--</bean>-->
    <!-- 延迟消息end -->



</beans>